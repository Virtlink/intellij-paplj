buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    id "org.jetbrains.intellij" version "0.2.18"
}

allprojects {
    apply plugin: 'idea'
    idea {
        module {
            generatedSourceDirs += file('src/gen')
        }
    }

    apply plugin: 'org.jetbrains.intellij'
    intellij {
        version ideaVersion
        downloadSources Boolean.valueOf(downloadIdeaSources)
        updateSinceUntilBuild = false
        instrumentCode = false
    }

    apply plugin: 'java'
    apply plugin: 'kotlin'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

    compileKotlin {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion

        kotlinOptions {
            jvmTarget = javaVersion
        }
    }

    sourceSets {
        main {
            java.srcDirs += 'src/main/gen'
        }
    }

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        compileOnly('com.github.JetBrains:Grammar-Kit:2017.1.1') {
            exclude group: 'org.jetbrains.plugins'
            exclude module: 'idea'
        }

        compile     "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
        testCompile 'junit:junit:4.11'
    }
}

group 'org.metaborg'
version '1.0-SNAPSHOT'

lexerTask(project, 'PapljLexer', 'org/metaborg/paplj')
parserTask(project, 'Paplj', 'org/metaborg/paplj')

static def codegenTask(project, task) {
    project.compileKotlin.dependsOn task
    project.compileTestKotlin.dependsOn task
    return task
}

def lexerTask(project, lexerName, pkg) {
    return codegenTask(project, tasks.create("generate${lexerName}", JavaExec) {
        def src = "$project.projectDir/src/main/grammars/$pkg/${lexerName}.flex"
        def dstRoot = "$project.projectDir/src/main/gen"
        def dst = "$dstRoot/$pkg"

        main = 'jflex.Main'
        classpath = files('lib/jflex/jflex-1.7.0-SNAPSHOT.jar')

        args = ['--skel', 'lib/jflex/idea-flex.skeleton',
                '-d', dst,
                src
        ]

        inputs.file file(src)
        outputs.dir file("$dst/_${lexerName}.java")
    })
}

def parserTask(project, parserName, pkg) {
    return codegenTask(project, tasks.create("generate${parserName}", JavaExec) {
        def src = "$project.projectDir/src/main/grammars/$pkg/${parserName}.bnf"
        def dstRoot = "$project.projectDir/src/main/gen"
        def dst = "$dstRoot/$pkg/psi"
        doFirst {
            delete file(dst)
        }

        main = 'org.intellij.grammar.Main'
        classpath(configurations.compileOnly)

        args = [dstRoot, file(src)]

        inputs.file file(src)
        outputs.dir dst
    })
}